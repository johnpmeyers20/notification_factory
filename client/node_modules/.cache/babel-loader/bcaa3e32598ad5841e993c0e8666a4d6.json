{"ast":null,"code":"var _jsxFileName = \"/Users/johnmeyers/Documents/Projects/notification_factory/src/App.js\";\nimport './App.css';\nimport './components/TopHalf';\nimport TopHalf from './components/TopHalf';\nimport BottomHalf from './components/BottomHalf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  name: 'Anna',\n  telephone: '9173455445',\n  email: 'john.meyers@mfa.gov.hu'\n}, {\n  name: 'Dzsoni',\n  telephone: '3476965676',\n  email: 'johnpmeyers20@yahoo.com'\n}];\n\nfunction App() {\n  // console.log(data);\n  const handleDragStart = e => {\n    e.dataTransfer.setData(\"text\", e.target.id); // console.log(e.target.id);\n  };\n\n  const handleDragEnterLeave = e => {\n    if (e.type === \"dragenter\") {\n      e.target.classList.add('drag-enter');\n      console.log(this.id, this.className);\n    } else {\n      this.classList.remove('drag-enter');\n      console.log(this.id, this.className);\n    }\n  }; // const handleOverDrop = e => {\n  //   e.preventDefault(); \n  //   //Depending on the browser in use, not using the preventDefault() could cause any number of strange default behaviours to occur.\n  //   if (e.type != \"drop\") {\n  //     return; //Means function will exit if no \"drop\" event is fired.\n  //   }\n  //   //Stores dragged elements ID in var draggedId\n  //   var draggedId = e.dataTransfer.getData(\"text\");\n  //   //Stores referrence to element being dragged in var draggedEl\n  //   var draggedEl = document.getElementById(draggedId);\n  //   //if the event \"drop\" is fired on the dragged elements original drop target e.i..  it's current parentNode, \n  //   //then set it's css class to =\"\" which will remove dotted lines around the drop target and exit the function.\n  //   if (draggedEl.parentNode == this) {\n  //     this.className = \"\";\n  //     return; //note: when a return is reached a function exits.\n  //   }\n  //   //Otherwise if the event \"drop\" is fired from a different target element, detach the dragged element node from it's\n  //   //current drop target (i.e current perantNode) and append it to the new target element. Also remove dotted css class. \n  //   draggedEl.parentNode.removeChild(draggedEl);\n  //   this.appendChild(draggedEl); //Note: \"this\" references to the current target div that is firing the \"drop\" event.\n  //   this.className = \"\";\n  // }\n  // //Retrieve two groups of elements, those that are draggable and those that are drop targets:\n  // var draggable = document.querySelectorAll('[draggable]')\n  // var targets = document.querySelectorAll('[data-drop-target]');\n  // //Note: using the document.querySelectorAll() will aquire every element that is using the attribute defind in the (..)\n  // //Register event listeners for the\"dragstart\" event on the draggable elements:\n  // for(var i = 0; i < draggable.length; i++) {\n  //   draggable[i].addEventListener(\"dragstart\", handleDragStart);\n  // }\n  // //Register event listeners for \"dragover\", \"drop\", \"dragenter\" & \"dragleave\" events on the drop target elements.\n  // for(var i = 0; i < targets.length; i++) {\n  //   targets[i].addEventListener(\"dragover\", handleOverDrop);\n  //   targets[i].addEventListener(\"drop\", handleOverDrop);\n  //   targets[i].addEventListener(\"dragenter\", handleDragEnterLeave);\n  //   targets[i].addEventListener(\"dragleave\", handleDragEnterLeave);\n  // }\n  // console.log(draggable);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Notification Factory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TopHalf, {\n        handleDragEnterLeave: handleDragEnterLeave\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BottomHalf, {\n        data: data,\n        handleDragStart: handleDragStart,\n        handleDragEnterLeave: handleDragEnterLeave\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/johnmeyers/Documents/Projects/notification_factory/src/App.js"],"names":["TopHalf","BottomHalf","data","name","telephone","email","App","handleDragStart","e","dataTransfer","setData","target","id","handleDragEnterLeave","type","classList","add","console","log","className","remove"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAO,sBAAP;AACA,OAAOA,OAAP,MAAoB,sBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAGA,MAAMC,IAAI,GAAG,CACX;AACEC,EAAAA,IAAI,EAAE,MADR;AAEEC,EAAAA,SAAS,EAAE,YAFb;AAGEC,EAAAA,KAAK,EAAE;AAHT,CADW,EAMX;AACEF,EAAAA,IAAI,EAAE,QADR;AAEEC,EAAAA,SAAS,EAAE,YAFb;AAGEC,EAAAA,KAAK,EAAE;AAHT,CANW,CAAb;;AAeA,SAASC,GAAT,GAAe;AACb;AACA,QAAMC,eAAe,GAAGC,CAAC,IAAI;AAC3BA,IAAAA,CAAC,CAACC,YAAF,CAAeC,OAAf,CAAuB,MAAvB,EAA+BF,CAAC,CAACG,MAAF,CAASC,EAAxC,EAD2B,CAE3B;AACD,GAHD;;AAIA,QAAMC,oBAAoB,GAAGL,CAAC,IAAI;AAChC,QAAGA,CAAC,CAACM,IAAF,KAAW,WAAd,EAA2B;AACzBN,MAAAA,CAAC,CAACG,MAAF,CAASI,SAAT,CAAmBC,GAAnB,CAAuB,YAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,EAAjB,EAAqB,KAAKO,SAA1B;AACD,KAHD,MAGO;AACL,WAAKJ,SAAL,CAAeK,MAAf,CAAsB,YAAtB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,EAAjB,EAAqB,KAAKO,SAA1B;AACD;AACF,GARD,CANa,CAeb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,OAAD;AAAS,QAAA,oBAAoB,EAAEN;AAA/B;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,UAAD;AAAY,QAAA,IAAI,EAAEX,IAAlB;AACE,QAAA,eAAe,EAAEK,eADnB;AAEE,QAAA,oBAAoB,EAAEM;AAFxB;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;KArEQP,G;AAuET,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport './components/TopHalf';\nimport TopHalf from './components/TopHalf';\nimport BottomHalf from './components/BottomHalf';\n\n\nconst data = [\n  {\n    name: 'Anna',\n    telephone: '9173455445',\n    email: 'john.meyers@mfa.gov.hu'\n  },\n  {\n    name: 'Dzsoni',\n    telephone: '3476965676',\n    email: 'johnpmeyers20@yahoo.com'\n  }\n];\n\n\n\nfunction App() {\n  // console.log(data);\n  const handleDragStart = e => {\n    e.dataTransfer.setData(\"text\", e.target.id);\n    // console.log(e.target.id);\n  }\n  const handleDragEnterLeave = e => {\n    if(e.type === \"dragenter\") {\n      e.target.classList.add('drag-enter');\n      console.log(this.id, this.className);\n    } else {\n      this.classList.remove('drag-enter');\n      console.log(this.id, this.className)\n    }\n  }\n  // const handleOverDrop = e => {\n  //   e.preventDefault(); \n  //   //Depending on the browser in use, not using the preventDefault() could cause any number of strange default behaviours to occur.\n  //   if (e.type != \"drop\") {\n  //     return; //Means function will exit if no \"drop\" event is fired.\n  //   }\n  //   //Stores dragged elements ID in var draggedId\n  //   var draggedId = e.dataTransfer.getData(\"text\");\n  //   //Stores referrence to element being dragged in var draggedEl\n  //   var draggedEl = document.getElementById(draggedId);\n  \n  //   //if the event \"drop\" is fired on the dragged elements original drop target e.i..  it's current parentNode, \n  //   //then set it's css class to =\"\" which will remove dotted lines around the drop target and exit the function.\n  //   if (draggedEl.parentNode == this) {\n  //     this.className = \"\";\n  //     return; //note: when a return is reached a function exits.\n  //   }\n  //   //Otherwise if the event \"drop\" is fired from a different target element, detach the dragged element node from it's\n  //   //current drop target (i.e current perantNode) and append it to the new target element. Also remove dotted css class. \n  //   draggedEl.parentNode.removeChild(draggedEl);\n  //   this.appendChild(draggedEl); //Note: \"this\" references to the current target div that is firing the \"drop\" event.\n  //   this.className = \"\";\n  // }\n  // //Retrieve two groups of elements, those that are draggable and those that are drop targets:\n  // var draggable = document.querySelectorAll('[draggable]')\n  // var targets = document.querySelectorAll('[data-drop-target]');\n  // //Note: using the document.querySelectorAll() will aquire every element that is using the attribute defind in the (..)\n\n\n  // //Register event listeners for the\"dragstart\" event on the draggable elements:\n  // for(var i = 0; i < draggable.length; i++) {\n  //   draggable[i].addEventListener(\"dragstart\", handleDragStart);\n  // }\n\n  // //Register event listeners for \"dragover\", \"drop\", \"dragenter\" & \"dragleave\" events on the drop target elements.\n  // for(var i = 0; i < targets.length; i++) {\n  //   targets[i].addEventListener(\"dragover\", handleOverDrop);\n  //   targets[i].addEventListener(\"drop\", handleOverDrop);\n  //   targets[i].addEventListener(\"dragenter\", handleDragEnterLeave);\n  //   targets[i].addEventListener(\"dragleave\", handleDragEnterLeave);\n  // }\n  // console.log(draggable);\n  return (\n    <div className=\"container\">\n      <div className=\"content\">\n        <h1>Notification Factory</h1>\n        <TopHalf handleDragEnterLeave={handleDragEnterLeave} />\n        <BottomHalf data={data}\n          handleDragStart={handleDragStart}\n          handleDragEnterLeave={handleDragEnterLeave}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}